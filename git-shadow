#!/bin/bash
# set -x

GITUNDERCONTROL=$(git rev-parse --is-inside-work-tree)
GITWORKTREE=$(git rev-parse --show-toplevel)
LINUXWORKTREE=$(echo /$GITWORKTREE|sed 's/://g'|sed 's/\/\//\//g')

GITKEEP='.gitkeep'
GITSHADOWCONFIG='config'
CONFIGFILE="$LINUXWORKTREE/$GITKEEP/$GITSHADOWCONFIG"

SHADOWREPOLIST=""
# SHADOWCONFIGLIST=""

getShadowEnvironment() {

    # SHADOWREPOLIST=`find "$LINUXWORKTREE" -type d -maxdepth 1 -name ".git-*" | sed 's/.git-//g' | xargs basename {}`
    # if [[ -f $CONFIGFILE ]]; then
    #     SHADOWCONFIGLIST=$(<"$CONFIGFILE")
    # fi

    echo "debug: load environment"

    if [[ -f $CONFIGFILE ]]; then
        #statements
        SHADOWREPOLIST=$(<"$CONFIGFILE")
    fi
}

# call from gitShadowCreate
# save current shadow repo to $currentRepo
getCurrentRepo(){
    # dummy
    echo ""
}

printUsage() {
    echo -e "[usage]"
    echo -e "[create shadow alias] git shadow create <git-repo> <repo-command-alias>"
    echo -e "[load alias]. .gitkeep/alias"
    echo -e "[init <git-repo>]<repo-command-alias> init"
}


#######################################
# main entry
#######################################
gitShadowInstall() {

    case `uname` in
        Darwin )
            platform="MacOSX"
            path="/usr/local/bin/"
            ;;
        Linux )
            ;;
        MINGW32_NT-* )
            platform="Windows"
            path="/usr/bin/"
            ;;
    esac
    
    # issue: mingw32 ln.exe cannot create symblink only copy it to dest
    ln $(dirname $0)/$(basename $0) $path/git-shadow 
    echo "git shadow installed."
}

gitShadowUninstall() {

    case `uname` in
        Darwin )
            platform="MacOSX"
            path="/usr/local/bin/"
            ;;
        Linux )
            ;;
        MINGW32_NT-* )
            platform="Windows"
            path="/usr/bin/"
            ;;
    esac

    rm $path/git-shadow
    echo "git shadow uninstalled from you system"
}

gitShadowCreate() {

    if [[ GITUNDERCONTROL ]]; then
        getShadowEnvironment
        
        isFound=false
        for repo in $SHADOWREPOLIST; do
            echo $1 " : " $repo
            if [[ $1 == $repo ]]; then
                echo "already exists break!"
                isFound=true
                break
            fi
        done
        # createNewShadowAlias $1 $2
        if [[ $isFound == false ]]; then
            # echo "create..."
            # SHADOWREPOLIST+=" "
            # SHADOWREPOLIST+=$1
            # echo $CONFIGFILE
            echo $1 $SHADOWREPOLIST > $CONFIGFILE
            echo $1 created and set as default repo.
        fi
    else
        echo -e "This folder is not under git control."
    fi

}

gitShadowDebug() {
    VAR=''
    echo ${VAR-"defalult"}
    echo $VAR
}


#######################################
#  bootstrapper
#######################################
echo -e "Git Shadow Repos 0.1"
# echo -e $(dirname $0) ** find script path
if [[ -z "$1" ]]; then
    echo BASH_SOURCE=$BASH_SOURCE
    if [[ "$BASH_SOURCE" = *\.* ]]; then
        #statements
        echo -e "Please install this script first."
        echo -e `basename "$0"` install
    else    
        printUsage
    fi
else
    case $1 in
        debug )
            gitShadowDebug
            ;;
        install )
            gitShadowInstall
            ;;
        uninstall )
            gitShadowUninstall
            ;;
        create* )
            gitShadowCreate $2
            ;;
        list )
            gitShadowList
            ;;
        load )
            gitShadowLoad
            ;;
        # this command shouldn't called by user
        invoke* )
            # $2 shadow-repo
            # $3 git-dir
            # $4 work-tree
            # $5 git command #1
            if [[ $# < 4 ]]; then
                printIvokeUsage
            else
                gitShadowInvoke $@
            fi
            
    esac

fi



